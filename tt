#!/bin/bash

echo -n  "enter branch name : "
#read user input
read  branch1 branch2 branch3
#branch=0
crnt_branch=`git branch | cut -d ' ' -f2`
#this loop with call function with branch name as input
for b in  $branch1 $branch2 $branch3
do
#check current branch 
#crnt_branch=`git branch | cut -d ' ' -f2`
verify__branch=`git branch | cut -d ' ' -f2 | egrep ^\$b\$`

#function for getting log for each brach
           function hello {
#if not at right branch then checkout to branch first              
if [ -z "$verify__branch" ]
  then

 git checkout $b
 
echo "collacting info"
fi
#if on first branch grep and sort msg.

br_msg=(`git log --oneline | egrep ' [A-Z]{1,3}-[0-9]{1,6}$' |cut -d' ' -f2|sort -u`)
if [[ "$b" == "$branch1" ]]
then

#br_msg1=(`git log --oneline | egrep ' [A-Z]{1,3}-[0-9]{1,6}$' |cut -d' ' -f2|sort -u`)

msg_cont1=(`echo ${br_msg[@]} |wc -w`)
echo "### first branch ###"
br_msg1=("${br_msg[@]}")
echo "${br_msg1[@]}"
echo "total msg :""$msg_cont1"
echo "%%%%%%%%%moving to next branch%%%%%%%%%%%%%%%%"
#br_msg1=("${br_msg[@]}")
fi
# if on second branch

if [[ "$b" == "$branch2" ]]
then
#br_msg2=(`git log --oneline | egrep ' [A-Z]{1,3}-[0-9]{1,6}$' |cut -d' ' -f2|sort -u`)

msg_cont2=(`echo ${br_msg[@]} |wc -w`)
echo "##### second branch  ########"
br_msg2=("${br_msg[@]}")
echo "${br_msg2[@]}"
echo "total msg: ""$msg_cont2"
echo "%%%%%%%%%moving to next branch%%%%%%%%%%%%%%%%"
#br_msg2=("${br_msg[@]}")
fi
#if on third branch
if [[ "$b" == "$branch3" ]]
then
echo "$loop"
#br_msg3=(`git log --oneline | egrep ' [A-Z]{1,3}-[0-9]{1,6}$' |cut -d' ' -f2|sort -u`)
msg_cont3=(`echo ${br_msg[@]}|wc -w`)
echo "##### third branch  ########"
br_msg3=("${br_msg[@]}")
echo "${br_msg3[@]}"
echo "total msg: ""$msg_cont3"
echo "%%%%%%%%%% end of third branch %%%%%%%%%%%%%%%%%"
#br_msg1=("${br_msg[@]}")
# marge all array in one array
#combined=( "${br_msg1[@]}" "${br_msg2[@]}" "${br_msg3[@]}" )
fi
}
           hello $b

combined=( "${br_msg1[@]}" "${br_msg2[@]}" "${br_msg3[@]}" )
done

# combined array output eliment and element count 
echo "combine output"
echo "%%%%%%%%% combine meg %%%%%%%%%%"
echo ${combined[@]}

echo "total msg : " ${combined[@]} |wc -w
echo "%%%%%%%%%%%%%%----------------%%%%%%%%%%%%%%%%%"

if [ -n "$b" ]
then

l2=1
echo "%%%%%%%%%uniq mseg%%%%%%%%%%"
echo "${combined[@]}" | tr ' ' '\n' | sort | uniq -u
sorted_unique_ids=$(echo "${combined[@]}" | tr ' ' '\n' | sort |uniq -u)
sorted_unique_ids=(`echo ${sorted_unique_ids[0]} |egrep "-"`)
m1=$msg_cont1
m2=$msg_cont2
m3=$msg_cont3
p1=$msg_cont1
p2=$p1+$msg_cont2
p3=$p2+$p3
r=0
echo "sorted msg count "
echo ${sorted_unique_ids[@]} |wc -w
echo "@@@@@@@@@@@@@@@@"
it=0
echo "                                      $msg_cont1"

for item in ${combined[@]}; do
let k=0
                for iti in ${sorted_unique_ids[@]}; do

                        if [ "$item" = "$iti" ] ; then    # use $item as rege
                        let k=$k+1
                        fi
                 done
if [[ "$k" -eq 0 ]]; then
     result+=( "$item" )
                   if [[ $it -lt $p1  ]]; then
                                 msg1+=( "$item" )
                   elif [[ $it -lt $p2  ]]; then
                                 msg2+=( "$item" )
                    else
                                 msg3+=( "$item" )
                    fi
      else
     result+=( "    -    " )
                 # if [[ $it -lt $msg_cont1  ]]; then
                  #      msg1+=( "    -    " )
                   #elif [[ $it -lt $msg_cont2  ]]; then
                    #    msg2+=( "    -    " )
                    #else
                    #      msg3+=( "    -    " )
                    #fi
fi

#echo                 "$msg1         $msg2      $msg3"
let it=$it+1
done
echo "final "
echo "${result[@]}"

fi
echo "-----sorted msg b1------"
echo ${msg1[@]}
echo "-----sorted msg b2------"
echo  ${msg2[@]}
echo "-----sorted msg b3------"
echo  ${msg3[@]}
#combining final fiter result in one array

trc=( "${msg1[@]}" "${msg2[@]}" "${msg3[@]}" )
tr=$(echo "${trc[@]}" | tr ' ' '\n' | sort -u)
echo "combile alfa"
tr=(`echo ${tr[0]} |egrep "-"`)
echo `echo ${tr[@]} |egrep "-"|wc -w`
echo ${tr[@]}
# loop for listing array valuses
k=0
#for final in ${tr[@]}; do
#echo ${msg1[@]} |grep $final 


for f in ${tr[@]}; do 
k1=0
k2=0
k3=0    
               for i in ${msg1[@]}; do

                        if [ "$f" = "$i" ] ; then    # use $item as rege
                        let k1=$k1+1
                        fi
		done

                 for i in ${msg2[@]}; do

                        if [ "$f" = "$i" ] ; then    # use $item as rege
                        let k2=$k2+1
                        fi
		done

                 for i in ${msg3[@]}; do

                        if [ "$f" = "$i" ] ; then    # use $item as rege
			let k3=$k3+1
			fi
                 done
if [[ "$k1" -eq 0 ]]; then
      rt1+=( "   -    " )
      else
      rt1+=( "$f" )
fi
if [[ "$k2" -eq 0 ]]; then
      rt2+=( "   -   " )
      else
      rt2+=( "$f" )
fi
if [[ "$k3" -eq 0 ]]; then
      rt3+=( "   -    " )
      else
      rt3+=( "$f" )
fi

done
echo "----------------------------------------"
printf "| %-10s | %-10s | %-10s |\n" "$branch1" "$branch2" "$branch3"

echo "----------------------------------------"
for i in ${tr[@]}; do

#echo "----------------------------------------"
printf "| %-10s | %-10s | %-10s |\n" "${rt1[$k]}" "${rt2[$k]}" "${rt3[$k]}"
let k=$k+1
done
echo "----------------------------------------"

`git checkout $crnt_branch`

