#!/bin/bash
#

#echo -n  "Enter 2 to 4 branches name sprated by white separated : "
#read user input
branch1=$1
branch2=$2
branch3=$3
branch4=$4
#branch=0
crnt_branch=`git branch | cut -d ' ' -f2`
for b in  $branch1 $branch2 $branch3 $branch4; do
                # verify inserted branch
                verify_branch=`git branch | cut -d ' ' -f2 | egrep ^\$b\$`
                #checking for "verify_branch" value to not be zero
                if [ -z "$verify_branch" ];then
                        #change branch if current branch in not same as first input
                        git checkout $b
                fi
                
		
		br_msg=(`git log | egrep -o ' [A-Z]{1,3}-[0-9]{1,6}$'|sort -u`) #machine msg pattern and sorting msg in alphabetical order. "XXX-123456"


                if [[ "$b" == "$branch1" ]];then


                        msg_cont1=(`echo ${br_msg[@]} |wc -w`) #counting stored msg in array
                        br_msg1=( "${br_msg[@]}" )
			 `git log --pretty=format:"%h  %ad  %s"| egrep  ' [A-Z]{1,3}-[0-9]{1,6}$' > /tmp/git1`

                fi
                ###########################
                #same process as above#
                if [[ "$b" == "$branch2" ]]; then
			 file2=(`git log --pretty=format:"%h  %ad  %s"| egrep  ' [A-Z]{1,3}-[0-9]{1,6}$'`)

                        br_msg2=( "${br_msg[@]}" )
                        msg_cont2=(`echo ${br_msg2[@]} |wc -w`) #counting stored msg in array
			 `git log --pretty=format:"%h  %ad  %s"| egrep  ' [A-Z]{1,3}-[0-9]{1,6}$' > /tmp/git2`

                fi
                ###########################
                #same steps as on above two branches.
                # counting  msg from third branch.
                if [[ "$b" == "$branch3" ]]; then

                        br_msg3=( "${br_msg[@]}" )
                        msg_cont3=(`echo ${br_msg3[@]}|wc -w`)
			 `git log --pretty=format:"%h  %ad  %s"| egrep  ' [A-Z]{1,3}-[0-9]{1,6}$' > /tmp/git3`

                fi
                ###########################
                #same steps as on above 3 branches.
                if [[ "$b" == "$branch4" ]]; then

                        br_msg4=( "${br_msg[@]}" )
                        msg_cont4=(`echo ${br_msg4[@]}|wc -w`)
			 `git log --pretty=format:"%h  %ad  %s"| egrep  ' [A-Z]{1,3}-[0-9]{1,6}$' > /tmp/git4`
                fi




done  #loop ended

                        # marge all array in one array
                        combined=( "${br_msg1[@]}" "${br_msg2[@]}" "${br_msg3[@]}" "${br_msg4[@]}" )

if [  -n "$b"  ]; then #checking for string lenth zero

        sorted_unique_ids=(`echo "${combined[@]}" | tr ' ' '\n' | sort |uniq -u`) #storing unique msg in array
        # to see tollel number of filtered  unique msg

        #adding msg length branch wise in variable
        p1=$msg_cont1
        p2=$p1+$msg_cont2
        p3=$p2+$msg_cont3

        #filttering only common msg in all branch
        it=0
        for com in ${combined[@]}; do
        k=0
                for uni in ${sorted_unique_ids[@]}; do

                        if [ "$com" = "$uni" ] ; then
                        let k=$k+1
                        fi
                 done
                if [[ "$k" -eq 0 ]]; then
                        result+=( "$com" )
                        if [[ $it -lt $p1 ]]; then
                                 msg1+=( "$com" )
                        elif [[ $it -lt $p2 ]]; then
                                 msg2+=( "$com" )
                        elif [[ $it -lt $p3 ]]; then
                                 msg3+=( "$com" )
                        else
                                 msg4+=( "$com" )
                        fi


                fi
        let it=$it+1
        done

fi
#combining filtered msg array to a single array.
trc=( "${msg1[@]}" "${msg2[@]}" "${msg3[@]}" "${msg4[@]}") #combining
tr=(`echo "${trc[@]}" | tr ' ' '\n' | sort -u`) #sorting unique values
#final result loop for printing common msg table
for f in ${tr[@]}; do #this array have only common msg out of all branches
k1=0
k2=0
k3=0
k4=0
               for i in ${msg1[@]}; do

                        if [ "$f" = "$i" ] ; then #matching common array values with first given branch's msg
                        let k1=$k1+1
                        fi
                done

                 for i in ${msg2[@]}; do

                        if [ "$f" = "$i" ] ; then
                        let k2=$k2+1
                        fi
                done

                 for i in ${msg3[@]}; do

                        if [ "$f" = "$i" ] ; then
                        let k3=$k3+1
                        fi
                 done
                 for i in ${msg4[@]}; do

                        if [ "$f" = "$i" ] ; then
                        let k4=$k4+1
                        fi
                 done
        if [[ "$k1" -eq 0 ]]; then  #if couldn't find match that will add "-" at missing location in array.
                 rt1+=( "    -      " )
		 dt1+=( "           " )
        else
                 dt1+=( `grep "\<$f\>" /tmp/git1 |head -1 |awk '{print   " "$3 "-" $4 "-"$6}'` )#grep commit date
                 rt1+=( "$f" )
        fi
        if [[ "$k2" -eq 0 ]]; then
                rt2+=( "    -      " )
		dt2+=( "           " )
        else
                rt2+=( "$f" )
                dt2+=( `grep "\<$f\>" /tmp/git2 |head -1 |awk '{print   " "$3 "-" $4 "-"$6}'` )#grep commit date

        fi
        if [[ "$k3" -eq 0 ]]; then
                rt3+=( "    -      " )
		dt3+=( "           " )
        else
                rt3+=( "$f" )
                dt3+=( `grep "\<$f\>" /tmp/git3 |head -1 |awk '{print   " "$3 "-" $4 "-"$6}'` )#grep commit date
        fi
        if [[ "$k4" -eq 0 ]]; then
                rt4+=( "    -      " )
		dt4+=( "           " )
        else
                rt4+=( "$f" )
                dt4+=( `grep "\<$f\>" /tmp/git4 |head -1 |awk '{print   " "$3 "-" $4 "-"$6}'` ) #grep commit date
        fi

done
echo "----------------------------------------------------------------------------------------------------------"
printf "| %-23s  | %-23s  | %-23s  | %-22s |\n" "   $branch1" "    $branch2" "    $branch3" "    $branch4"

echo "----------------------------------------------------------------------------------------------------------"
k=0
for i in ${tr[@]}; do   # loop to print the final result

        #echo "----------------------------------------"
        printf "| %-11s  %-11s |  %-11s %-11s | %-11s %-11s | %-11s %-11s |\n" "${rt1[$k]}" "${dt1[$k]}"  "${rt2[$k]}" "${dt2[$k]}" "${rt3[$k]}" "${dt3[$k]}" "${rt4[$k]}" "${dt4[$k]}"
        let k=$k+1
done
echo "-----------------------------------------------------------------------------------------------------------"
`git checkout $crnt_branch` #will checkout to the same branch where from script has been executed


